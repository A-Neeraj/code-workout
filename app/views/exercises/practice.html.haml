= render partial: 'layouts/breadcrumb'
.col-md-7
  = semantic_form_for @exercise_version,
    url: (@workout_offering ? organization_workout_offering_exercise_evaluate_path(id: @exercise_version.exercise.id,
      course_id: @workout_offering.course_offering.course.slug,
      organization_id: @workout_offering.course_offering.course.organization.slug,
      term_id: @workout_offering.course_offering.term.slug,
      workout_offering_id: @workout_offering.id) : exercise_evaluate_path(@exercise_version.exercise,
    exercise_version_id: @exercise_version.id,
    feedback_return: true)), remote: true do |f|
    = f.semantic_errors
    %h1= @exercise.display_name
    - user_workout_score = @workout_score || WorkoutScore.find_by(workout: @workout, user: current_user)
    - puts "USERWKTSCR", user_workout_score,"\nUSERWKTSCR"
    - puts "USERWKTTime", user_workout_score.andand.time_remaining,"\nUSERWKTTIME"
    - if user_workout_score.andand.time_remaining
      = "You have #{n_to_s(user_workout_score.andand.time_remaining)} minutes remaining"
    #countdown 
    - if @exercise_version.stem
      = markdown @exercise_version.stem.preamble
    - prompt = @exercise_version.prompts.first.specific
    = markdown prompt.question
    - if prompt.is_mcq?
      - answer = Choice.new
      - if prompt.allow_multiple
        %h2 Choose ALL that apply:
        .answers
          = f.semantic_fields_for answer do |p|
            = p.input :id,
              as: :check_boxes,
              collection: @answers,
              member_value: :id,
              member_label: :answer,
              selected: false,
              label: '&nbsp;'
      - else
        %h3 Select one answer:
        - prior_answer = @attempt && @attempt.prompt_answers.where(prompt: prompt.acting_as).first
        - if prior_answer
          - answer = prior_answer.specific.choices.first || answer
        .answers
          = f.semantic_fields_for answer do |p|
            = p.input :id,
              as: :radio,
              collection: @answers,
              member_value: :id,
              member_label: :answer,
              label: '&nbsp;'
    - elsif prompt.is_coding?
      - prior_answer = @attempt && @attempt.prompt_answers.where(prompt: prompt.acting_as).first
      - read_only = false
      - if prior_answer && @workout_offering
        - if @workout_offering.can_be_practiced_by?(current_user) == false
          - read_only = true
      = f.input :answer_code, as: :text, class: 'code',
        input_html: { lang: 'text/x-' + (@exercise.language || 'java').downcase, readonly: true, autofocus: true,
          value: prior_answer ? prior_answer.specific.answer : prompt.prepare_starter_code }
    .actions
      - if @workout_offering.nil? || @workout_offering.can_be_practiced_by?(current_user)
        - if @workout_offering.andand.workout_policy.andand.hide_feedback_before_finish
          = f.submit 'Save my answer!', class: 'btn btn-primary btn-submit', id: 'primarybtn'
        - else
          = f.submit 'Check my answer!', class: 'btn btn-primary btn-submit', id: 'primarybtn'
        - if @workout_offering
          = button_link 'Next exercise',
            organization_workout_offering_practice_path(exercise_id: @workout.next_exercise(@exercise, current_user, nil),
            organization_id: @workout_offering.course_offering.course.organization.slug,
            course_id: @workout_offering.course_offering.course.slug,
            term_id: @workout_offering.course_offering.term.slug,
            id: @workout_offering.id),
            class: 'btn btn-next', id: 'nextbtn'

    - if session[:current_workout].nil?
      %br
      = link_to "Practice a different #{@exercise.language} exercise",     |
        (@exercise.language ?                                              |
        random_exercise_path(language: @exercise.language) :               |
        random_exercise_path)                                              |
.col-md-5
  #saved_assurance
  - if @attempt
    #exercisefeedback
      = render partial: 'sse/ajax_feedback'
  - else
    #exercisefeedback
      = render partial: 'workout_scores/time_remaining',
        locals: { workout_score: @workout_score }
