%h2 Feedback
- attempt = nil
- attempts = Attempt.where(user_id: current_user.id,exercise_version_id: @exercise.current_version_id)
- if attempts.any?
  - attempt = attempts.last
  - puts "ATTEMPT ",attempt.id,"ATTEMPT ","ATTEMPTis "
  - if @exercise.is_mcq?
    = Choice.find(attempt.answer.to_i).feedback
  - elsif @exercise.is_coding?
    %table.table.table-striped.feedback
      %thead
        %tr
          %th Behavior
          %th Result
      %tbody
        -# puts "IJD","IJD",TestCaseResult.where(attempt_id: attempt.id).last,"IJD","IJD"
        - CodingPrompt.find(@exercise.current_version.prompts.first.actable_id).test_cases.each_with_index do |test_case, i|
          %tr
            %td
              - puts "TEST CASE"
              - p test_case
              - puts "TEST CASE"
              - tcr = TestCaseResult.all.order('id desc').                    |
                find_by(test_case_id: test_case.id, user_id: current_user.id) |
              - puts "TCR"
              - p tcr
              - puts "TCR"
              - if tcr.execution_feedback.include?("CODE-ERROR-CODE-ERROR")
                CODE EXECUTION ERROR
                = tcr.execution_feedback
                - break
              = test_case.description
              - if !tcr.pass
                %br
                .out= tcr.execution_feedback
            - if tcr.pass
              %td.pass
                %i.fa.fa-check-square
            - else
              %td.fail
                %i.fa.fa-minus-square
  - if session[:current_workout] && params[:wexes].nil?
    = link_to 'Finish workout',
      workout_evaluate_path(uid: current_user.id,
        wid: session[:current_workout])
  - elsif session[:current_workout] && params[:wexes][1..-1].count >= 0
    - puts "HINTER WEXES",params[:wexes][1..-1],"HINTER WEXES"
    = link_to 'Next question',
      exercise_practice_path(id: params[:wexes].first,
        wexes: params[:wexes][1..-1]),
      method: :get
