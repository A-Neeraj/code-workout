Development team notes:

Database Test Data
------------------
After each pull, please do the following to place the database in
a simple starter state we can all use:
    
    rake db:reset
    rake db:populate

The initial database population is defined by lib/tasks/sample_data.rake.
It uses the factories defined in spec/factories/* to generate entities.
If you add new modael classes and want to generate test data in the
database, please add to the sample_data.rake file so that this population
will happen automatically for everyone.  The sample_data.rake contains
only "sample/try out" data for use during development, and it won't
appear on the production server.  Initial database contents provided
for all new installs, including the production server, is described
in db/seeds.rb instead.
    
  - The initial database includes the following accounts:
    - admin@codeworkout.org (pass: adminadmin), has admin-level access
    - example-1@railstutorial.org (pass: hokiehokie), has instructor access
    - example-*@railstutorial.org (pass: hokiehokie) 50 students
    
    It also includes the following other objects:
    - two terms (spring 2013 and fall 2013),
    - one organization (VT)
    - one course (CS 1114)
    - two offerings of 1114 (one each semester)
      - one course offering is set up with the admin and instructor
        as instructors, and all other sample accounts as students


Git Practices
-------------
Do all work in your own branch, then merge into master when features
are tested/working.  Pull master changes and merge them into your branch
when necessary.

After pulling updates from git, be sure to run this to update any Gem
changes to the project:

    bundle install

After pulling updates from git, be sure to run this to bring the database
up to speed:

    rake db:reset
    rake db:populate


Issues to Resolve
-----------------
+   Java coding question support needs to be completed.

+   Cancan security implementation needs to be completed.

+   The "Find your course" button on the home page needs to be implemented.

+   The "Create your course" button on the home page needs to be implemented.

+   The "Try a question now" button on the home page needs to be implemented.
    +   The auxiliary links in that same box on the home page should go
        to random representatives of specific types of questions, but they
        aren't implemented, either.

+   model/exercises.rb needs a method to return the language for a coding
    exercise.
    +   In app/views/exercises/practice.html.haml, for coding exercises, use
        this new method to add the programming language as an attribute on
        the textarea, so that codemirror will use the correct syntax
        highlighting.  The attribute should look like: 'lang="text/x-java"'.
        It can be added using an extra parameter to the f.input command
        like this: 'input_html: { lang: ("text/x-" + @exercise.language) }'

+   Exercise thumbnails currently include an icon, but the icon should
    be based on the exercise type (MC = glyphicon-th-list, Coding =
    fa-file-code-o or fa-keyboard-o?) instead.

+   Exercise thumbnails need to include meaningful point displays even
    when the exercise is not associated with the current workout, and
    need to include meaningful points earned info if the current user
    has completed (or attempted) it.  At present, the logic for displaying
    points earned + total points in thumbnails is incomplete and needs to
    be redone.
